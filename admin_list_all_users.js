// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ Admin API
import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('Missing Supabase credentials');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function listAllUsers() {
  console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ Admin API...');
  console.log('=' .repeat(60));

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ Admin API
    const { data: adminUsers, error: adminError } = await supabase.auth.admin.listUsers();
    
    if (adminError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ Admin API:', adminError);
      return;
    }

    console.log(`üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${adminUsers.users.length}`);
    console.log('\nüë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
    console.log('-'.repeat(60));

    adminUsers.users.forEach((user, index) => {
      console.log(`${index + 1}. ${user.email || 'No email'}`);
      console.log(`   ID: ${user.id}`);
      console.log(`   –°–æ–∑–¥–∞–Ω: ${user.created_at}`);
      console.log(`   Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: ${user.email_confirmed_at ? '‚úÖ' : '‚ùå'}`);
      console.log(`   –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: ${user.last_sign_in_at || '–ù–∏–∫–æ–≥–¥–∞'}`);
      console.log('');
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç –≤ credits
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –∫—Ä–µ–¥–∏—Ç–æ–≤...');
    console.log('-'.repeat(60));

    for (const user of adminUsers.users) {
      const { data: credits, error: creditsError } = await supabase
        .from('credits')
        .select('balance, created_at')
        .eq('user_id', user.id)
        .single();

      if (creditsError || !credits) {
        console.log(`‚ùå ${user.email || user.id} - –ù–ï–¢ –ö–†–ï–î–ò–¢–û–í`);
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–µ–¥–∏—Ç—ã
        console.log(`   üîß –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤...`);
        const { data: initResult, error: initError } = await supabase
          .rpc('initialize_user_trial_credits_safe', { user_uuid: user.id });
        
        if (initError) {
          console.log(`   ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${initError.message}`);
        } else if (initResult) {
          console.log(`   ‚úÖ –ö—Ä–µ–¥–∏—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã`);
        } else {
          console.log(`   ‚ö†Ô∏è  –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ (–≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ –µ—Å—Ç—å –∫—Ä–µ–¥–∏—Ç—ã)`);
        }
      } else {
        console.log(`‚úÖ ${user.email || user.id} - ${credits.balance} –∫—Ä–µ–¥–∏—Ç–æ–≤`);
      }
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const usersWithoutCredits = [];
    for (const user of adminUsers.users) {
      const { data: credits } = await supabase
        .from('credits')
        .select('user_id')
        .eq('user_id', user.id)
        .single();
      
      if (!credits) {
        usersWithoutCredits.push(user);
      }
    }

    console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log('-'.repeat(60));
    console.log(`–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${adminUsers.users.length}`);
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –∫—Ä–µ–¥–∏—Ç–æ–≤: ${usersWithoutCredits.length}`);
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫—Ä–µ–¥–∏—Ç–∞–º–∏: ${adminUsers.users.length - usersWithoutCredits.length}`);

    if (usersWithoutCredits.length > 0) {
      console.log('\n‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ –∫—Ä–µ–¥–∏—Ç–æ–≤:');
      usersWithoutCredits.forEach(user => {
        console.log(`   - ${user.email || user.id} (—Å–æ–∑–¥–∞–Ω: ${user.created_at})`);
      });
    }

  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫
listAllUsers();