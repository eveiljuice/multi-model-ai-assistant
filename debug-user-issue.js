// –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('Missing Supabase credentials');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function debugUserIssue(userEmail) {
  console.log(`üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userEmail}`);
  console.log('=' .repeat(50));

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ auth.users
    console.log('\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ auth.users...');
    const { data: authUsers, error: authError } = await supabase
      .from('auth.users')
      .select('id, email, created_at, email_confirmed_at, deleted_at')
      .eq('email', userEmail);

    if (authError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ auth.users:', authError);
      
      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ RPC
      console.log('–ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ admin API...');
      const { data: adminUsers, error: adminError } = await supabase.auth.admin.listUsers();
      
      if (adminError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ admin API:', adminError);
      } else {
        const user = adminUsers.users.find(u => u.email === userEmail);
        if (user) {
          console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ admin API:', {
            id: user.id,
            email: user.email,
            created_at: user.created_at,
            email_confirmed_at: user.email_confirmed_at
          });
        } else {
          console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ admin API');
        }
      }
    } else {
      if (authUsers && authUsers.length > 0) {
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ auth.users:', authUsers[0]);
      } else {
        console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ auth.users');
        return;
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
    let userId = null;
    if (authUsers && authUsers.length > 0) {
      userId = authUsers[0].id;
    } else {
      // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ admin API
      const { data: adminUsers } = await supabase.auth.admin.listUsers();
      const user = adminUsers?.users.find(u => u.email === userEmail);
      if (user) {
        userId = user.id;
      }
    }

    if (!userId) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return;
    }

    console.log(`\nüìã ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ credits
    console.log('\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã credits...');
    const { data: credits, error: creditsError } = await supabase
      .from('credits')
      .select('*')
      .eq('user_id', userId);

    if (creditsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ credits:', creditsError);
    } else {
      if (credits && credits.length > 0) {
        console.log('‚úÖ –ó–∞–ø–∏—Å—å –≤ credits –Ω–∞–π–¥–µ–Ω–∞:', credits[0]);
      } else {
        console.log('‚ùå –ó–∞–ø–∏—Å—å –≤ credits –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        
        // –ü—Ä–æ–±—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–µ–¥–∏—Ç—ã
        console.log('\nüîß –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤...');
        const { data: initResult, error: initError } = await supabase
          .rpc('initialize_user_trial_credits', { user_uuid: userId });
        
        if (initError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤:', initError);
        } else {
          console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', initResult);
        }
      }
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤
    console.log('\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ credit_transactions...');
    const { data: transactions, error: transError } = await supabase
      .from('credit_transactions')
      .select('*')
      .eq('user_id', userId)
      .order('created_at', { ascending: false })
      .limit(5);

    if (transError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ transactions:', transError);
    } else {
      if (transactions && transactions.length > 0) {
        console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω—ã:', transactions);
      } else {
        console.log('‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      }
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º error_logs
    console.log('\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ error_logs...');
    const { data: errorLogs, error: errorLogsError } = await supabase
      .from('error_logs')
      .select('*')
      .eq('user_id', userId)
      .order('created_at', { ascending: false })
      .limit(3);

    if (errorLogsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ error_logs:', errorLogsError);
    } else {
      if (errorLogs && errorLogs.length > 0) {
        console.log('‚úÖ –õ–æ–≥–∏ –æ—à–∏–±–æ–∫ –Ω–∞–π–¥–µ–Ω—ã:', errorLogs);
      } else {
        console.log('‚ùå –õ–æ–≥–∏ –æ—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      }
    }

    // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–∞–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–æ–≤
    console.log('\n5. –¢–µ—Å—Ç —Å–ø–∏—Å–∞–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤...');
    const { data: deductResult, error: deductError } = await supabase
      .rpc('deduct_credits', {
        p_user_id: userId,
        p_amount: 1,
        p_agent_id: 'test-agent',
        p_description: 'Test deduction'
      });

    if (deductError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤:', deductError);
    } else {
      console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–ø–∏—Å–∞–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤:', deductResult);
    }

  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
const userEmail = process.argv[2];
if (!userEmail) {
  console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node debug-user-issue.js <email>');
  process.exit(1);
}

debugUserIssue(userEmail);