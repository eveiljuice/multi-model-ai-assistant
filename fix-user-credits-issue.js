// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –∫—Ä–µ–¥–∏—Ç–∞–º–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('Missing Supabase credentials');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function fixUserCreditsIssue(userEmail) {
  console.log(`üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userEmail}`);
  console.log('=' .repeat(50));

  try {
    // 1. –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\n1. –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const { data: adminUsers, error: adminError } = await supabase.auth.admin.listUsers();
    
    if (adminError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', adminError);
      return;
    }

    const user = adminUsers.users.find(u => u.email === userEmail);
    if (!user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', {
      id: user.id,
      email: user.email,
      created_at: user.created_at
    });

    const userId = user.id;

    // 2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ credits
    console.log('\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ credits...');
    const { data: existingCredits, error: creditsCheckError } = await supabase
      .from('credits')
      .select('*')
      .eq('user_id', userId);

    if (creditsCheckError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ credits:', creditsCheckError);
      return;
    }

    if (existingCredits && existingCredits.length > 0) {
      console.log('‚úÖ –ó–∞–ø–∏—Å—å –≤ credits —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', existingCredits[0]);
    } else {
      console.log('‚ùå –ó–∞–ø–∏—Å—å –≤ credits –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º...');
      
      // 3. –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –≤ credits
      const { data: newCredits, error: createCreditsError } = await supabase
        .from('credits')
        .insert([{
          user_id: userId,
          balance: 5, // –ü—Ä–æ–±–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        }])
        .select();

      if (createCreditsError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è credits:', createCreditsError);
        return;
      }

      console.log('‚úÖ –ó–∞–ø–∏—Å—å –≤ credits —Å–æ–∑–¥–∞–Ω–∞:', newCredits[0]);

      // 4. –°–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      const { data: transaction, error: transactionError } = await supabase
        .from('credit_transactions')
        .insert([{
          user_id: userId,
          amount: 5,
          type: 'trial',
          description: 'Initial trial credits - manual fix',
          created_at: new Date().toISOString()
        }])
        .select();

      if (transactionError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', transactionError);
      } else {
        console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞:', transaction[0]);
      }
    }

    // 5. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å user_activity
    console.log('\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ user_activity...');
    const { data: existingActivity, error: activityCheckError } = await supabase
      .from('user_activity')
      .select('*')
      .eq('user_id', userId);

    if (activityCheckError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ user_activity:', activityCheckError);
    } else if (!existingActivity || existingActivity.length === 0) {
      console.log('‚ùå –ó–∞–ø–∏—Å—å –≤ user_activity –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º...');
      
      const { data: newActivity, error: createActivityError } = await supabase
        .from('user_activity')
        .insert([{
          user_id: userId,
          last_active: new Date().toISOString(),
          weekly_logins: 1,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        }])
        .select();

      if (createActivityError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è user_activity:', createActivityError);
      } else {
        console.log('‚úÖ –ó–∞–ø–∏—Å—å –≤ user_activity —Å–æ–∑–¥–∞–Ω–∞:', newActivity[0]);
      }
    } else {
      console.log('‚úÖ –ó–∞–ø–∏—Å—å –≤ user_activity —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', existingActivity[0]);
    }

    // 6. –¢–µ—Å—Ç —Å–ø–∏—Å–∞–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤
    console.log('\n4. –¢–µ—Å—Ç —Å–ø–∏—Å–∞–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤...');
    const { data: deductResult, error: deductError } = await supabase
      .rpc('deduct_credits', {
        p_user_id: userId,
        p_amount: 1,
        p_agent_id: 'test-agent',
        p_description: 'Test deduction after fix'
      });

    if (deductError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤:', deductError);
    } else {
      console.log('‚úÖ –°–ø–∏—Å–∞–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç:', deductResult);
    }

    // 7. –¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
    console.log('\n5. –¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫...');
    const { data: logResult, error: logError } = await supabase
      .from('error_logs')
      .insert([{
        user_id: userId,
        session_id: 'test-session',
        error_type: 'test_error',
        error_message: 'Test error message',
        component: 'fix-script',
        severity: 'low'
      }])
      .select();

    if (logError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:', logError);
    } else {
      console.log('‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', logResult[0]);
      
      // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
      await supabase
        .from('error_logs')
        .delete()
        .eq('id', logResult[0].id);
    }

    console.log('\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
const userEmail = process.argv[2];
if (!userEmail) {
  console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node fix-user-credits-issue.js <email>');
  process.exit(1);
}

fixUserCreditsIssue(userEmail);