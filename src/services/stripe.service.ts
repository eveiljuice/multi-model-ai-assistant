import { loadStripe, Stripe } from '@stripe/stripe-js';
import { supabase } from './supabaseClient';
import { getProductByPriceId, StripeProduct } from '../config/stripe-products';

export interface StripeCheckoutResponse {
  success: boolean;
  sessionId?: string;
  url?: string;
  error?: string;
}

export interface StripeSubscriptionData {
  customerId: string;
  subscriptionId: string;
  status: string;
  priceId: string;
  currentPeriodStart: string;
  currentPeriodEnd: string;
}

export interface StripeOrderData {
  orderId: string;
  customerId: string;
  priceId: string;
  amount: number;
  currency: string;
  status: string;
  credits: number;
  checkoutSessionId?: string;
}

export interface StripeConfig {
  publicKey: string;
  secretKey: string;
  webhookSecret: string;
}

class StripeService {
  private stripePromise: Promise<Stripe | null> | null = null;
  private publicKey: string | null = null;

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á Stripe –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
   */
  private getPublicKey(): string {
    if (this.publicKey) {
      return this.publicKey;
    }

    const publicKey = import.meta.env.VITE_STRIPE_PUBLIC_KEY;
    
    if (!publicKey) {
      throw new Error('Stripe public key not configured in environment variables');
    }

    this.publicKey = publicKey;
    return this.publicKey;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç Stripe –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
   */
  private async getStripeClient(): Promise<Stripe | null> {
    if (!this.stripePromise) {
      const publicKey = this.getPublicKey();
      this.stripePromise = loadStripe(publicKey);
    }
    return this.stripePromise;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç checkout —Å–µ—Å—Å–∏—é –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Stripe API
   */
  async createCheckoutSession(
    priceId: string,
    mode: 'payment' | 'subscription' = 'payment',
    successUrl?: string,
    cancelUrl?: string
  ): Promise<StripeCheckoutResponse> {
    try {
      const { data: { session }, error: sessionError } = await supabase.auth.getSession();

      if (sessionError || !session) {
        throw new Error('User not authenticated');
      }

      const user = session.user;
      const baseUrl = window.location.origin;
      const defaultSuccessUrl = successUrl || `${baseUrl}/success?session_id={CHECKOUT_SESSION_ID}`;
      const defaultCancelUrl = cancelUrl || `${baseUrl}/pricing`;

      const product = getProductByPriceId(priceId);
      if (!product) {
        throw new Error('Product not found');
      }

      console.log('üîÑ Creating checkout session for product:', product);

      // –°–æ–∑–¥–∞–µ–º checkout session —á–µ—Ä–µ–∑ API
      const checkoutSession = await this.createStripeCheckoutSession({
        priceId,
        mode,
        successUrl: defaultSuccessUrl,
        cancelUrl: defaultCancelUrl,
        customerEmail: user.email!,
        userId: user.id,
        credits: product.credits
      });

      return {
        success: true,
        sessionId: checkoutSession.id,
        url: checkoutSession.url
      };
    } catch (error) {
      console.error('Stripe checkout error:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç checkout session —á–µ—Ä–µ–∑ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π API
   */
  private async createStripeCheckoutSession(options: {
    priceId: string;
    mode: 'payment' | 'subscription';
    successUrl: string;
    cancelUrl: string;
    customerEmail: string;
    userId: string;
    credits: number;
  }): Promise<any> {
    console.log('üì§ Sending request to create checkout session:', options);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ Express server –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    console.log('üéØ Using Express server as primary method');
    return await this.createCheckoutViaExpressServer(options);
  }

  private async createCheckoutViaEdgeFunction(options: any): Promise<any> {
    // –ü–æ–ª—É—á–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const { data: { session }, error: sessionError } = await supabase.auth.getSession();
    
    if (sessionError || !session?.access_token) {
      console.error('‚ùå Session error:', sessionError);
      throw new Error('User not authenticated or session expired');
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('üîë Using session token length:', session.access_token.length);
    console.log('üë§ User ID:', session.user.id);

    try {
      const response = await supabase.functions.invoke('stripe-checkout-v4', {
        body: options,
        headers: {
          Authorization: `Bearer ${session.access_token}`,
          'Content-Type': 'application/json'
        }
      });

      if (response.error) {
        console.error('‚ùå Edge Function error details:', response.error);
        // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å —Ç–æ–∫–µ–Ω–æ–º, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é
        if (response.error.message?.includes('invalid session token') || 
            response.error.message?.includes('JWT')) {
          console.log('üîÑ Trying to refresh session...');
          const { error: refreshError } = await supabase.auth.refreshSession();
          if (refreshError) {
            throw new Error('Session expired, please login again');
          }
          // –ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ø—Ä–æ–±—Ä–æ—Å–∏–º –æ—à–∏–±–∫—É –¥–ª—è fallback
          throw new Error('Token refresh needed, falling back to Express server');
        }
        throw new Error(response.error.message || 'Edge Function failed');
      }

      console.log('‚úÖ Checkout session created via Edge Function:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå Edge Function request failed:', error);
      throw error;
    }
  }

  private async createCheckoutViaExpressServer(options: any): Promise<any> {
    // Express server URLs –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏–π
    let apiUrl: string;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL —Å–µ—Ä–≤–µ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
      // Development mode - –ª–æ–∫–∞–ª—å–Ω—ã–π Express —Å–µ—Ä–≤–µ—Ä
      apiUrl = 'http://localhost:3002/api/stripe/create-checkout-session';
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
      try {
        const healthCheck = await fetch('http://localhost:3002/health', { 
          method: 'GET',
          signal: AbortSignal.timeout(3000) // 3 —Å–µ–∫—É–Ω–¥—ã —Ç–∞–π–º–∞—É—Ç
        });
        if (!healthCheck.ok) {
          throw new Error('Express server health check failed');
        }
        console.log('‚úÖ Express server is healthy');
      } catch (error) {
        console.error('üö´ Express server not available:', error);
        throw new Error('Express server not running. Please run: npm run server');
      }
    } else {
      // Production mode - –∏—Å–ø–æ–ª—å–∑—É–µ–º Netlify Functions (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –≤ —Ç–æ—Ç –∂–µ –¥–æ–º–µ–Ω)
      apiUrl = '/.netlify/functions/stripe-checkout';
      console.log('üåê Using Netlify Functions for Stripe');
    }
    
    console.log('üéØ Express server URL:', apiUrl);
    
    const response = await fetch(apiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      },
      body: JSON.stringify(options)
    });

    if (!response.ok) {
      let errorMessage = 'Failed to create checkout session';
      console.error('‚ùå Express server response error:', {
        status: response.status,
        statusText: response.statusText,
        headers: Object.fromEntries(response.headers.entries())
      });
      
      try {
        // –ö–ª–æ–Ω–∏—Ä—É–µ–º response —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
        const responseClone = response.clone();
        const errorData = await responseClone.json();
        errorMessage = errorData.error || errorMessage;
      } catch (jsonError) {
        try {
          const errorText = await response.text();
          errorMessage = errorText || errorMessage;
        } catch (textError) {
          console.error('‚ùå Failed to read response:', textError);
          errorMessage = `HTTP ${response.status}: ${response.statusText}`;
        }
      }
      throw new Error(errorMessage);
    }

    const result = await response.json();
    console.log('‚úÖ Checkout session created via Express server:', result);
    return result;
  }

  /**
   * –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ Stripe Checkout
   */
  async redirectToCheckout(
    priceId: string,
    mode: 'payment' | 'subscription' = 'payment',
    successUrl?: string,
    cancelUrl?: string
  ): Promise<void> {
    const response = await this.createCheckoutSession(priceId, mode, successUrl, cancelUrl);

    if (response.success && response.url) {
      window.location.href = response.url;
    } else {
      throw new Error(response.error || 'Failed to create checkout session');
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getSubscriptionData(userId?: string): Promise<StripeSubscriptionData | null> {
    try {
      const { data, error } = await supabase
        .from('stripe_subscriptions')
        .select(`
          subscription_id,
          status,
          price_id,
          current_period_start,
          current_period_end,
          stripe_customers!inner(customer_id, user_id)
        `)
        .eq('stripe_customers.user_id', userId || (await supabase.auth.getUser()).data.user?.id)
        .eq('status', 'active')
        .single();

      if (error || !data) {
        return null;
      }

      return {
        customerId: data.stripe_customers.customer_id,
        subscriptionId: data.subscription_id,
        status: data.status,
        priceId: data.price_id,
        currentPeriodStart: data.current_period_start,
        currentPeriodEnd: data.current_period_end
      };
    } catch (error) {
      console.error('Error fetching subscription data:', error);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getUserOrders(userId?: string): Promise<StripeOrderData[]> {
    try {
      const { data, error } = await supabase
        .from('stripe_orders')
        .select(`
          checkout_session_id,
          amount_total,
          currency,
          payment_status,
          status,
          credits_amount,
          created_at,
          stripe_customers!inner(customer_id, user_id)
        `)
        .eq('stripe_customers.user_id', userId || (await supabase.auth.getUser()).data.user?.id)
        .order('created_at', { ascending: false });

      if (error) {
        throw new Error(error.message);
      }

      return data.map(order => ({
        orderId: order.checkout_session_id,
        customerId: order.stripe_customers.customer_id,
        priceId: '', // –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º price_id –≤ –∑–∞–∫–∞–∑–∞—Ö
        amount: order.amount_total,
        currency: order.currency,
        status: order.payment_status,
        credits: order.credits_amount,
        checkoutSessionId: order.checkout_session_id
      }));
    } catch (error) {
      console.error('Error fetching user orders:', error);
      return [];
    }
  }

  /**
   * –û—Ç–º–µ–Ω—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É
   */
  async cancelSubscription(subscriptionId: string): Promise<{ success: boolean; error?: string }> {
    try {
      const { data: { session }, error: sessionError } = await supabase.auth.getSession();
      
      if (sessionError || !session) {
        throw new Error('User not authenticated');
      }

      const response = await supabase.functions.invoke('stripe-cancel-subscription', {
        body: { subscriptionId },
        headers: {
          Authorization: `Bearer ${session.access_token}`,
          'Content-Type': 'application/json'
        }
      });

      if (response.error) {
        throw new Error(response.error.message || 'Failed to cancel subscription');
      }

      return { success: true };
    } catch (error) {
      console.error('Error canceling subscription:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á Stripe (–ø—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥)
   */
  getStripePublicKey(): string {
    return this.getPublicKey();
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã success)
   */
  async handlePaymentSuccess(sessionId: string): Promise<void> {
    try {
      const { error } = await supabase.rpc('handle_stripe_payment_success', {
        session_id: sessionId
      });

      if (error) {
        throw new Error(error.message);
      }
    } catch (error) {
      console.error('Error handling payment success:', error);
      throw error;
    }
  }

  // Utility methods
  getProductByPriceId(priceId: string): StripeProduct | undefined {
    return getProductByPriceId(priceId);
  }

  formatAmount(amount: number, currency: string = 'usd'): string {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: currency.toUpperCase()
    }).format(amount / 100);
  }

  getCreditAmountFromPriceId(priceId: string): number {
    const product = getProductByPriceId(priceId);
    return product?.credits || 0;
  }
}

export const stripeService = new StripeService(); 