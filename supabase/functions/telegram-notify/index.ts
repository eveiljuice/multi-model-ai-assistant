import { serve } from "https://deno.land/std@0.168.0/http/server.ts"

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

interface TelegramMessage {
  chat_id: string;
  text: string;
  parse_mode?: string;
}

interface IdeaSuggestion {
  id: string;
  title: string;
  description: string;
  category: string;
  priority: string;
  user_id?: string;
  created_at: string;
}

// –ò—Å–ø–æ–ª—å–∑—É–µ–º environment variables —Å fallback
const TELEGRAM_BOT_TOKEN = Deno.env.get('TELEGRAM_BOT_TOKEN') || '7788182965:AAEiUmRg4l_HvaV3honhiVZluu_gFadOcrA';
const TELEGRAM_CHAT_ID = Deno.env.get('TELEGRAM_CHAT_ID') || '-1002604809855';

async function sendTelegramMessage(message: TelegramMessage): Promise<boolean> {
  try {
    console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', {
      chat_id: message.chat_id,
      text_length: message.text.length,
      has_bot_token: !!TELEGRAM_BOT_TOKEN
    });

    if (!TELEGRAM_BOT_TOKEN) {
      console.error('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      return false;
    }

    const telegramUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;

    const response = await fetch(telegramUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(message),
    });

    const result = await response.json();
    
    console.log('–û—Ç–≤–µ—Ç –æ—Ç Telegram API:', {
      status: response.status,
      statusText: response.statusText,
      ok: response.ok,
      result: response.ok ? { message_id: result.result?.message_id } : result
    });

    if (!response.ok) {
      console.error('–û—à–∏–±–∫–∞ Telegram API:', {
        status: response.status,
        statusText: response.statusText,
        error: result.description || result.error_code
      });
      return false;
    }

    console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram');
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', error);
    return false;
  }
}

function formatIdeaMessage(idea: IdeaSuggestion): string {
  const categoryEmojis: Record<string, string> = {
    'new_agent': 'ü§ñ',
    'feature_improvement': '‚ö°',
    'ui_enhancement': 'üé®',
    'integration': 'üîó',
    'other': 'üí°'
  };

  const priorityEmojis: Record<string, string> = {
    'low': 'üü¢',
    'medium': 'üü°',
    'high': 'üü†',
    'urgent': 'üî¥'
  };

  const categoryEmoji = categoryEmojis[idea.category] || 'üí°';
  const priorityEmoji = priorityEmojis[idea.priority] || 'üü°';

  const formattedDate = new Date(idea.created_at).toLocaleString('ru-RU', {
    timeZone: 'Europe/Moscow',
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
    hour: '2-digit',
    minute: '2-digit'
  });

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  return `üöÄ <b>–ù–æ–≤–∞—è –∏–¥–µ—è –¥–ª—è Donein5!</b>

${categoryEmoji} <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> ${getCategoryName(idea.category)}
${priorityEmoji} <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> ${getPriorityName(idea.priority)}

üìù <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b>
${idea.title}

üìã <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
${idea.description}

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${idea.user_id ? `ID: ${idea.user_id}` : '–ê–Ω–æ–Ω–∏–º–Ω—ã–π'}
üïê <b>–í—Ä–µ–º—è:</b> ${formattedDate}
üÜî <b>ID –∏–¥–µ–∏:</b> <code>${idea.id}</code>

---
<i>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑ Donein5</i>`;
}

function getCategoryName(category: string): string {
  const names: Record<string, string> = {
    'new_agent': '–ù–æ–≤—ã–π –∞–≥–µ–Ω—Ç',
    'feature_improvement': '–£–ª—É—á—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π',
    'ui_enhancement': '–£–ª—É—á—à–µ–Ω–∏–µ UI',
    'integration': '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è',
    'other': '–î—Ä—É–≥–æ–µ'
  };
  return names[category] || category;
}

function getPriorityName(priority: string): string {
  const names: Record<string, string> = {
    'low': '–ù–∏–∑–∫–∏–π',
    'medium': '–°—Ä–µ–¥–Ω–∏–π',
    'high': '–í—ã—Å–æ–∫–∏–π',
    'urgent': '–°—Ä–æ—á–Ω—ã–π'
  };
  return names[priority] || priority;
}

serve(async (req) => {
  console.log('=== Telegram notify function –≤—ã–∑–≤–∞–Ω–∞ ===');
  console.log('–ú–µ—Ç–æ–¥:', req.method);
  console.log('URL:', req.url);

  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    console.log('CORS preflight request');
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if (!TELEGRAM_BOT_TOKEN) {
      console.error('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      return new Response(
        JSON.stringify({ 
          success: false, 
          error: 'TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ environment variables',
          config_needed: 'supabase secrets set TELEGRAM_BOT_TOKEN=your_bot_token'
        }),
        { 
          status: 500, 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
        }
      );
    }

    if (!TELEGRAM_CHAT_ID) {
      console.error('‚ùå TELEGRAM_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      return new Response(
        JSON.stringify({ 
          success: false, 
          error: 'TELEGRAM_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ environment variables',
          config_needed: 'supabase secrets set TELEGRAM_CHAT_ID=your_chat_id'
        }),
        { 
          status: 500, 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
        }
      );
    }

    const body = await req.text();
    console.log('–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:', body);

    if (!body) {
      console.error('–ü—É—Å—Ç–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞');
      return new Response(
        JSON.stringify({ error: 'Empty request body' }),
        { 
          status: 400, 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
        }
      );
    }

    let data;
    try {
      data = JSON.parse(body);
      console.log('–†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', data);
    } catch (parseError) {
      console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', parseError);
      return new Response(
        JSON.stringify({ error: 'Invalid JSON in request body' }),
        { 
          status: 400, 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
        }
      );
    }

    const { record } = data;
    
    if (!record) {
      console.error('–ù–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ');
      return new Response(
        JSON.stringify({ error: 'No record provided' }),
        { 
          status: 400, 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
        }
      );
    }

    console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–¥–µ–∏:', {
      id: record.id,
      title: record.title,
      category: record.category,
      priority: record.priority
    });

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
    const messageText = formatIdeaMessage(record);
    console.log('–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª–∏–Ω–æ–π:', messageText.length);
    
    const telegramMessage: TelegramMessage = {
      chat_id: TELEGRAM_CHAT_ID,
      text: messageText,
      parse_mode: 'HTML'
    };

    const success = await sendTelegramMessage(telegramMessage);

    if (success) {
      console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
      return new Response(
        JSON.stringify({ 
          success: true, 
          message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram —É—Å–ø–µ—à–Ω–æ',
          debug_info: {
            chat_id: TELEGRAM_CHAT_ID,
            idea_id: record.id,
            message_length: messageText.length
          }
        }),
        { 
          status: 200, 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
        }
      );
    } else {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram');
      return new Response(
        JSON.stringify({ 
          success: false, 
          error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram'
        }),
        { 
          status: 500, 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
        }
      );
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ telegram-notify:', error);
    
    return new Response(
      JSON.stringify({ 
        success: false, 
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        stack: error instanceof Error ? error.stack : undefined
      }),
      { 
        status: 500, 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    );
  }
})