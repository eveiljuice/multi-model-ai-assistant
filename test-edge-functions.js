import https from 'https';

const SUPABASE_URL = 'https://sgzlhcagtesjazvwskjw.supabase.co';

async function testEndpoint(path, description) {
    return new Promise((resolve) => {
        const url = `${SUPABASE_URL}/functions/v1/${path}`;
        console.log(`\n–¢–µ—Å—Ç–∏—Ä—É—é: ${description}`);
        console.log(`URL: ${url}`);
        
        const startTime = Date.now();
        
        const req = https.request(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer invalid_token'
            }
        }, (res) => {
            const responseTime = Date.now() - startTime;
            console.log(`‚úÖ –°—Ç–∞—Ç—É—Å: ${res.statusCode} (${res.statusMessage})`);
            console.log(`‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${responseTime}ms`);
            
            let data = '';
            res.on('data', chunk => data += chunk);
            res.on('end', () => {
                try {
                    const response = JSON.parse(data);
                    console.log(`üìù –û—Ç–≤–µ—Ç:`, response);
                } catch (e) {
                    console.log(`üìù –û—Ç–≤–µ—Ç (raw):`, data.substring(0, 200));
                }
                resolve({ status: res.statusCode, responseTime, working: true });
            });
        });
        
        req.on('error', (error) => {
            console.log(`‚ùå –û—à–∏–±–∫–∞:`, error.message);
            resolve({ error: error.message, working: false });
        });
        
        req.on('timeout', () => {
            console.log(`‚è∞ Timeout`);
            req.destroy();
            resolve({ error: 'Timeout', working: false });
        });
        
        req.setTimeout(10000); // 10 —Å–µ–∫—É–Ω–¥ timeout
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π JSON
        req.write(JSON.stringify({ test: true }));
        req.end();
    });
}

async function runTests() {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Edge Functions\n');
    console.log('=' * 50);
    
    const functions = [
        { path: 'stripe-checkout', description: 'Stripe Checkout Session' },
        { path: 'stripe-webhook', description: 'Stripe Webhook Handler' },
        { path: 'webhook-handler', description: 'Alternative Webhook Handler' },
        { path: 'credit-meter', description: 'Credit Deduction' },
        { path: 'ai-proxy', description: 'AI Proxy Service' },
        { path: 'telegram-notify', description: 'Telegram Notifications' }
    ];
    
    const results = [];
    
    for (const func of functions) {
        const result = await testEndpoint(func.path, func.description);
        results.push({ ...func, ...result });
        
        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
    console.log('\n' + '=' * 50);
    console.log('üìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:');
    console.log('=' * 50);
    
    results.forEach(result => {
        const status = result.working ? '‚úÖ –†–ê–ë–û–¢–ê–ï–¢' : '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢';
        const time = result.responseTime ? `(${result.responseTime}ms)` : '';
        console.log(`${result.description}: ${status} ${time}`);
        if (result.error) {
            console.log(`   –û—à–∏–±–∫–∞: ${result.error}`);
        }
    });
    
    const workingCount = results.filter(r => r.working).length;
    console.log(`\nüìà –†–∞–±–æ—Ç–∞—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π: ${workingCount}/${results.length}`);
    
    if (workingCount === results.length) {
        console.log('üéâ –í—Å–µ Edge Functions –¥–æ—Å—Ç—É–ø–Ω—ã!');
    } else {
        console.log('‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
    }
}

runTests().catch(console.error); 