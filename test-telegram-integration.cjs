// –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
console.log('ü§ñ Testing Telegram Integration for Donein5');

async function testTelegramIntegration() {
  console.log('\n=== –¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram Test Endpoint ===');
  
  try {
    const response = await fetch('http://localhost:3002/api/telegram/test', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    });

    if (response.ok) {
      const result = await response.json();
      console.log('‚úÖ Telegram Test API —Ä–∞–±–æ—Ç–∞–µ—Ç:', result.message);
      return true;
    } else {
      const errorText = await response.text();
      console.log('‚ùå Telegram Test API –æ—à–∏–±–∫–∞:', response.status, errorText);
      return false;
    }
  } catch (error) {
    console.log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Telegram Test API:', error.message);
    return false;
  }
}

async function testStripeWebhookSimulation() {
  console.log('\n=== –¢–ï–°–¢ 2: –°–∏–º—É–ª—è—Ü–∏—è Stripe Webhook –¥–ª—è Payment ===');
  
  // –°–æ–∑–¥–∞–µ–º checkout session –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  try {
    const checkoutResponse = await fetch('http://localhost:3002/api/stripe/create-checkout-session', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        priceId: 'price_1RiUvhAK7V4m73alSPDpllg2', // Small Credits
        mode: 'payment',
        successUrl: 'http://localhost:5173/success?session_id={CHECKOUT_SESSION_ID}',
        cancelUrl: 'http://localhost:5173/pricing',
        customerEmail: 'test-telegram@example.com',
        userId: 'telegram-test-user',
        credits: 100
      })
    });

    if (checkoutResponse.ok) {
      const session = await checkoutResponse.json();
      console.log('‚úÖ Test Checkout Session —Å–æ–∑–¥–∞–Ω–∞:', session.id);
      
      // Note: –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ webhook –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∑–≤–∞–Ω Stripe
      console.log('üìù –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ Stripe –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç webhook');
      console.log('üìù –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram');
      
      return true;
    } else {
      const errorText = await checkoutResponse.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è checkout session:', errorText);
      return false;
    }
  } catch (error) {
    console.log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ checkout session:', error.message);
    return false;
  }
}

async function checkSuggestIdeaFormIntegration() {
  console.log('\n=== –¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ Suggest an Idea –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ===');
  
  console.log('üìã –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é:');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
  const fs = require('fs');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Supabase Edge Function
    const edgeFunctionExists = fs.existsSync('/workspace/supabase/functions/telegram-notify/index.ts');
    console.log('‚úÖ Edge Function –¥–ª—è Telegram:', edgeFunctionExists ? '–°–£–©–ï–°–¢–í–£–ï–¢' : '–ù–ï –ù–ê–ô–î–ï–ù');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º database trigger
    const migrationExists = fs.existsSync('/workspace/supabase/migrations/20250120000000_add_telegram_trigger.sql');
    console.log('‚úÖ Database Trigger Migration:', migrationExists ? '–°–£–©–ï–°–¢–í–£–ï–¢' : '–ù–ï –ù–ê–ô–î–ï–ù');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º SuggestIdeaModal –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    const modalExists = fs.existsSync('/workspace/src/components/SuggestIdeaModal.tsx');
    console.log('‚úÖ SuggestIdeaModal –∫–æ–º–ø–æ–Ω–µ–Ω—Ç:', modalExists ? '–°–£–©–ï–°–¢–í–£–ï–¢' : '–ù–ï –ù–ê–ô–î–ï–ù');
    
    if (edgeFunctionExists && migrationExists && modalExists) {
      console.log('üéâ Suggest an Idea —Ñ–æ—Ä–º–∞ —É–∂–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å Telegram!');
      console.log('üìù –ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–¥–µ–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ');
      return true;
    } else {
      console.log('‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã Suggest an Idea –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
      return false;
    }
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Suggest an Idea –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:', error.message);
    return false;
  }
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
async function runAllTests() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...\\n');
  
  const telegramTest = await testTelegramIntegration();
  const stripeTest = await testStripeWebhookSimulation();
  const suggestIdeaTest = await checkSuggestIdeaFormIntegration();
  
  console.log('\\n' + '='.repeat(60));
  console.log('üìã –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ TELEGRAM –ò–ù–¢–ï–ì–†–ê–¶–ò–ò');
  console.log('='.repeat(60));
  
  console.log('‚úÖ Telegram API —Ç–µ—Å—Ç:', telegramTest ? '–†–ê–ë–û–¢–ê–ï–¢' : '–ù–ï –†–ê–ë–û–¢–ê–ï–¢');
  console.log('‚úÖ Stripe Payment —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', stripeTest ? '–ù–ê–°–¢–†–û–ï–ù–´' : '–ù–ï –ù–ê–°–¢–†–û–ï–ù–´');
  console.log('‚úÖ Suggest an Idea —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', suggestIdeaTest ? '–†–ê–ë–û–¢–ê–Æ–¢' : '–ù–ï –†–ê–ë–û–¢–ê–Æ–¢');
  
  const allGood = telegramTest && stripeTest && suggestIdeaTest;
  
  if (allGood) {
    console.log('\\nüéâ –£–°–ü–ï–•: Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!');
    console.log('üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ —á–∞—Ç: -1002604809855');
    
    console.log('\\nüìù –ê–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:');
    console.log('1. üí° Suggest an Idea —Ñ–æ—Ä–º–∞ ‚Üí Telegram');
    console.log('2. üí∞ –£—Å–ø–µ—à–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ Stripe ‚Üí Telegram');  
    console.log('3. üö´ –û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–æ–∫ ‚Üí Telegram');
    console.log('4. ‚ùå –û—à–∏–±–∫–∏ –æ–ø–ª–∞—Ç—ã ‚Üí Telegram');
    
    console.log('\\nüîß –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞:');
    console.log('‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Stripe webhooks –≤ dashboard');
    console.log('‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase');
    console.log('‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç -1002604809855');
    
  } else {
    console.log('\\n‚ùå –ü–†–û–ë–õ–ï–ú–´: –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞');
    
    if (!telegramTest) {
      console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram Bot Token –∏ Chat ID');
    }
    if (!stripeTest) {
      console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Stripe');
    }
    if (!suggestIdeaTest) {
      console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã Supabase –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏');
    }
  }
  
  console.log('='.repeat(60));
}

// –ó–∞–ø—É—Å–∫
runAllTests().catch(error => {
  console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
});