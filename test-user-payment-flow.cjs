// –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø–ª–∞—Ç—ã –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
const express = require('express');
const cors = require('cors');

// –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ Express —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ
console.log('üß™ Testing Stripe Payment Flow as Real User');

async function testCompletePaymentFlow() {
  console.log('\n=== –¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ Express —Å–µ—Ä–≤–µ—Ä–∞ ===');
  
  try {
    const response = await fetch('http://localhost:3002/health');
    const health = await response.json();
    console.log('‚úÖ Express Server Health:', health);
    
    if (!health.stripe_configured) {
      console.error('‚ùå –ö–†–ò–¢–ò–ß–ù–û: Stripe –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ Express —Å–µ—Ä–≤–µ—Ä–µ!');
      return false;
    }
  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ù–û: Express —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!', error.message);
    console.log('üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: cd server && node server.js');
    return false;
  }

  console.log('\n=== –¢–ï–°–¢ 2: –°–æ–∑–¥–∞–Ω–∏–µ Checkout Session ===');
  
  try {
    const checkoutData = {
      priceId: 'price_1RiUt0AK7V4m73aluYckgD6P', // Monthly Subscription
      mode: 'subscription',
      successUrl: 'http://localhost:5173/success?session_id={CHECKOUT_SESSION_ID}',
      cancelUrl: 'http://localhost:5173/pricing',
      customerEmail: 'test@example.com',
      userId: 'test-user-' + Date.now(),
      credits: 250
    };

    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ:', checkoutData);

    const response = await fetch('http://localhost:3002/api/stripe/create-checkout-session', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(checkoutData)
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è session:', response.status, errorText);
      return false;
    }

    const result = await response.json();
    console.log('‚úÖ Checkout Session —Å–æ–∑–¥–∞–Ω–∞:', {
      sessionId: result.id,
      url: result.url ? result.url.substring(0, 80) + '...' : 'NO URL'
    });

    if (!result.url) {
      console.error('‚ùå –ö–†–ò–¢–ò–ß–ù–û: –ù–µ—Ç URL –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞!');
      return false;
    }

    console.log('\n=== –¢–ï–°–¢ 3: –ê–Ω–∞–ª–∏–∑ Stripe URL ===');
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ URL –≤–∞–ª–∏–¥–Ω—ã–π –¥–ª—è Stripe
    if (result.url.includes('checkout.stripe.com')) {
      console.log('‚úÖ URL –≤–µ–¥–µ—Ç –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π Stripe Checkout');
      
      // –ò–∑–≤–ª–µ—á–µ–º session ID –∏–∑ URL
      const sessionIdMatch = result.url.match(/cs_[a-zA-Z0-9_]+/);
      if (sessionIdMatch) {
        console.log('‚úÖ Session ID –Ω–∞–π–¥–µ–Ω:', sessionIdMatch[0]);
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —ç—Ç–æ live session (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å cs_live)
      if (result.url.includes('cs_live')) {
        console.log('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è LIVE Stripe session (—Ä–µ–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏!)');
        console.log('üí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ test –∫–ª—é—á–∏ (cs_test)');
      }
      
    } else {
      console.error('‚ùå –ö–†–ò–¢–ò–ß–ù–û: URL –Ω–µ –≤–µ–¥–µ—Ç –Ω–∞ Stripe Checkout!');
      return false;
    }

    return true;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è checkout:', error.message);
    return false;
  }
}

async function testDifferentProducts() {
  console.log('\n=== –¢–ï–°–¢ 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ ===');
  
  const products = [
    { id: 'monthly-subscription', priceId: 'price_1RiUt0AK7V4m73aluYckgD6P', name: 'Monthly Subscription' },
    { id: 'small-topup', priceId: 'price_1RiUvhAK7V4m73alSPDpllg2', name: 'Small Credits' },
    { id: 'medium-topup', priceId: 'price_1RiUxdAK7V4m73alz8Oad0YH', name: 'Medium Credits' },
    { id: 'xxl-topup', priceId: 'price_1RiUyPAK7V4m73alBCuO8sYC', name: 'XXL Credits' }
  ];

  let successCount = 0;

  for (const product of products) {
    try {
      console.log(`\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${product.name}`);
      
      const response = await fetch('http://localhost:3002/api/stripe/create-checkout-session', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          priceId: product.priceId,
          mode: product.id.includes('subscription') ? 'subscription' : 'payment',
          successUrl: 'http://localhost:5173/success',
          cancelUrl: 'http://localhost:5173/pricing',
          customerEmail: 'test@example.com',
          userId: 'test-user'
        })
      });

      if (response.ok) {
        const result = await response.json();
        console.log(`‚úÖ ${product.name}: Session —Å–æ–∑–¥–∞–Ω`);
        successCount++;
      } else {
        console.log(`‚ùå ${product.name}: –û—à–∏–±–∫–∞ ${response.status}`);
      }

    } catch (error) {
      console.log(`‚ùå ${product.name}: Exception - ${error.message}`);
    }
  }

  console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${successCount}/${products.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç`);
  return successCount === products.length;
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
async function runAllTests() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø–ª–∞—Ç—ã...\n');
  
  const basicFlowPassed = await testCompletePaymentFlow();
  const allProductsPassed = await testDifferentProducts();
  
  console.log('\n' + '='.repeat(60));
  console.log('üìã –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
  console.log('='.repeat(60));
  
  console.log('‚úÖ –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã:', basicFlowPassed ? '–†–ê–ë–û–¢–ê–ï–¢' : '–ù–ï –†–ê–ë–û–¢–ê–ï–¢');
  console.log('‚úÖ –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã Stripe:', allProductsPassed ? '–†–ê–ë–û–¢–ê–Æ–¢' : '–ù–ï –†–ê–ë–û–¢–ê–Æ–¢');
  
  if (basicFlowPassed && allProductsPassed) {
    console.log('\nüéâ –£–°–ü–ï–•: Stripe –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É!');
    console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–∏–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏');
    console.log('\nüìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞:');
    console.log('1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ Stripe Dashboard');
    console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π');
    console.log('3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
    console.log('4. –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –ø–ª–∞—Ç–µ–∂–µ–π');
  } else {
    console.log('\n‚ùå –ü–†–û–ë–õ–ï–ú–´: –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞');
    console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º');
  }
  
  console.log('='.repeat(60));
}

// –ó–∞–ø—É—Å–∫
runAllTests().catch(error => {
  console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
});